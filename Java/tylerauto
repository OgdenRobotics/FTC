package org.firstinspires.ftc.teamcode;


import android.text.style.UpdateAppearance;


import com.qualcomm.hardware.lynx.commands.core.LynxReadVersionStringCommand;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;

import com.qualcomm.robotcore.eventloop.opmode.TeleOp;

import com.qualcomm.robotcore.eventloop.opmode.Disabled;

import com.qualcomm.robotcore.hardware.CRServo;

//import com.qualcomm.robotcore.hardware.CRServoImpl;

import com.qualcomm.robotcore.hardware.CRServoImpl;

import com.qualcomm.robotcore.hardware.DcMotor;

import com.qualcomm.robotcore.hardware.DcMotorSimple;

import com.qualcomm.robotcore.hardware.Servo;

import com.qualcomm.robotcore.util.ElapsedTime;

import com.qualcomm.robotcore.util.Range;


import com.qualcomm.robotcore.hardware.Servo;


import org.firstinspires.ftc.robotcontroller.external.samples.ConceptScanServo;


/**
 * This file contains an minimal example of a Linear "OpMode". An OpMode is a 'program' that runs in either
 * <p>
 * the autonomous or the teleop period of an FTC match. The names of OpModes appear on the menu
 * <p>
 * of the FTC Driver Station. When an selection is made from the menu, the corresponding OpMode
 * <p>
 * class is instantiated on the Robot Controller and executed.
 * <p>
 * <p>
 * <p>
 * This particular OpMode just executes a basic Tank Drive Teleop for a two wheeled robot
 * <p>
 * It includes all the skeletal structure that all linear OpModes contain.
 * <p>
 * <p>
 * <p>
 * Use Android Studios to Copy this Class, and Paste it into your team's code folder with a new name.
 * <p>
 * Remove or comment out the @Disabled line to add this opmode to the Driver Station OpMode list
 */


@Autonomous(name = "TylerAutonomous", group = "Linear Opmode")

//@Disabled

public class TylerAutonomous extends LinearOpMode {


    // Declare OpMode members.

    private ElapsedTime runtime = new ElapsedTime();

    private DcMotor leftDrive = null;

    private DcMotor rightDrive = null;

    private DcMotor armDrive = null;

    private CRServo Servo1;


    double servoPosition = 0.5;


    @Override

    public void runOpMode() {
        //LOWER DOWN
        runtime.reset();
        while (opModeIsActive() && (runtime.seconds() < 3.0))
            //UNHOOK
            leftDrive.setDirection(DcMotorSimple.Direction.REVERSE);
        rightDrive.setDirection(DcMotorSimple.Direction.REVERSE);

        //MOVE
        // step (using the FTC Robot Controller app on the phone).

        leftDrive = hardwareMap.get(DcMotor.class, "left_drive");

        rightDrive = hardwareMap.get(DcMotor.class, "right_drive");

        armDrive = hardwareMap.get(DcMotor.class, "arm_drive");

        Servo1 = hardwareMap.get(CRServo.class, "CRServo");

        // armservo = hardwareMap.servo.get("arm_servo");


        // Most robots need the motor on one side to be reversed to drive forward

        // Reverse the motor that runs backwards when connected directly to the ba[==.ttery

        leftDrive.setDirection(DcMotor.Direction.FORWARD);

        rightDrive.setDirection(DcMotor.Direction.REVERSE);

        armDrive.setDirection(DcMotor.Direction.FORWARD);


        telemetry.addData("Initial Servo position:", Servo1.getDirection());

        telemetry.addData("Initial Servo Connection information:", "%s", Servo1.getConnectionInfo());

        // Wait for the game to start (driver presses PLAY)

        waitForStart();

        runtime.reset();


        // run until the end of the match (driver presses STOP)

        while (opModeIsActive()) {

            // Setup a variable for each drive wheel to save power level for telemetry

            double leftPower;

            double rightPower;

            double armPower;


            // Choose to drive using either Tank Mode, or POV Mode

            // Comment out the method that's not used.  The default below is POV.


            // POV Mode uses left stick to go forward, and right stick to turn.

            // - This uses basic math to combine motions and is easier to drive straight.

            double drive = -gamepad1.left_stick_y;

            double turn = gamepad1.right_stick_x;

            double up = gamepad2.right_stick_y;

            double down = -gamepad2.left_stick_y;


            leftPower = Range.clip(drive + turn, -1.0, 1.0);

            rightPower = Range.clip(drive - turn, -1.0, 1.0);

            armPower = Range.clip(up - down, -0.5, 0.5);

            //  servoPosition = Range.clip (servoPosition,0,1);


            // Tank Mode uses one stick to control each wheel.

            // - This requires no math, but it is hard to drive forward slowly and keep straight.

            // leftPower  = -gamepad1.left_stick_y ;

            // rightPower = -gamepad1.right_stick_y ;


            // Send calculated power to wheels

            leftDrive.setPower(leftPower);

            rightDrive.setPower(rightPower);

            armDrive.setPower(armPower);


            // Show the elapsed game time and wheel power.

            telemetry.addData("Status", "Run Time: " + runtime.toString());

            telemetry.addData("Motors", "left (%.2f), right (%.2f)", leftPower, rightPower);

            telemetry.addData("Servo Position", "%.2f", Servo1.getPower());

            telemetry.addData("Servo Connection information:", Servo1.getConnectionInfo());

            telemetry.update();

        }

    }

}
