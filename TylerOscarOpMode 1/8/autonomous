package org.firstinspires.ftc.teamcode;


import android.text.style.UpdateAppearance;


import com.qualcomm.hardware.lynx.commands.core.LynxReadVersionStringCommand;
import com.qualcomm.hardware.rev.Rev2mDistanceSensor;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;

import com.qualcomm.robotcore.eventloop.opmode.TeleOp;

import com.qualcomm.robotcore.eventloop.opmode.Disabled;

import com.qualcomm.robotcore.hardware.CRServo;

//import com.qualcomm.robotcore.hardware.CRServoImpl;

import com.qualcomm.robotcore.hardware.CRServoImpl;

import com.qualcomm.robotcore.hardware.DcMotor;

import com.qualcomm.robotcore.hardware.DcMotorSimple;

import com.qualcomm.robotcore.hardware.Servo;

import com.qualcomm.robotcore.util.ElapsedTime;

import com.qualcomm.robotcore.util.Range;


import com.qualcomm.robotcore.hardware.Servo;


import org.firstinspires.ftc.robotcontroller.external.samples.ConceptScanServo;


/**
 * This file contains an minimal example of a Linear "OpMode". An OpMode is a 'program' that runs in either
 * <p>
 * the autonomous or the teleop period of an FTC match. The names of OpModes appear on the menu
 * <p>
 * of the FTC Driver Station. When an selection is made from the menu, the corresponding OpMode
 * <p>
 * class is instantiated on the Robot Controller and executed.
 * <p>
 * <p>
 * <p>
 * This particular OpMode just executes a basic Tank Drive Teleop for a two wheeled robot
 * <p>
 * It includes all the skeletal structure that all linear OpModes contain.
 * <p>
 * <p>
 * <p>
 * Use Android Studios to Copy this Class, and Paste it into your team's code folder with a new name.
 * <p>
 * Remove or comment out the @Disabled line to add this opmode to the Driver Station OpMode list
 */


@Autonomous(name = "TylerAutonomous", group = "Linear Opmode")

//@Disabled

public class ForwardAutonomous extends TylerOscarOpMode {


    /* Declare OpMode members. */

    //HardwarePushbot         robot   = new HardwarePushbot();   // Use a Pushbot's hardware

    private ElapsedTime runtime = new ElapsedTime();

    private DcMotor leftDrive = null;

    private DcMotor rightDrive = null;

    private Rev2mDistanceSensor sensorRange;


    static final double FORWARD_SPEED = 0.6;

    static final double TURN_SPEED = 0.5;


    @Override
    public void runOpMode() {

        leftDrive  = hardwareMap.get(DcMotor.class, "left_drive");

        rightDrive = hardwareMap.get(DcMotor.class, "right_drive");

        sensorRange = hardwareMap.get(Rev2mDistanceSensor.class, "sensor_range");

        telemetry.addData("Status", "Ready to run");    //

        telemetry.update();

        waitForStart();


        // Step 1:  Drive forward for 3 seconds

        // Step 1:  Drive forward for 3 seconds

        leftDrive.setPower(-FORWARD_SPEED);

        rightDrive.setPower(FORWARD_SPEED);

        sensorRange.getModelID();

        sensorRange.didTimeoutOccur();

        runtime.reset();

        while (opModeIsActive() && (runtime.seconds() < 8)) {

            telemetry.addData("Path", "Leg 1: %2.5f S Elapsed", runtime.seconds());

            telemetry.update();



        }
    }
}





